#!/usr/bin/env bash
set -Eeuo pipefail

vm_generator_orchestrator=multipass
architecture=amd64

project_path=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
generated_path=generated
project_generator_path="${project_path}/platform/vm-generator"
generated_project_path="${project_generator_path}/${generated_path}"
valid_architectures=( amd64 arm64 )
valid_orchestrators=( fake multipass vbox )

__usage=$(
	cat <<-HELPMSG
		$(tput setaf 2)Usage:$(tput sgr0) $(tput bold)$0 [OPTIONS]$(tput sgr0)

		$(tput setaf 3)$(tput bold)Manage machines provisioning.$(tput sgr0)

		Options:
		  -a, --all             $(tput setaf 8)Run all tasks to setup virtual machines (in order: generate create setup provision)$(tput sgr0)
		  -g, --generate        $(tput setaf 8)Generate setup scripts$(tput sgr0)
		  -c, --create          $(tput setaf 8)Create virtual machines$(tput sgr0)
		  -s, --setup           $(tput setaf 8)Setup virtual machines$(tput sgr0)
		  -p, --provision       $(tput setaf 8)Provision virtual machines$(tput sgr0)
		  -d, --delete          $(tput setaf 8)Delete virtual machines$(tput sgr0)
		  -h, --help            $(tput setaf 8)This help$(tput sgr0)
	HELPMSG
)

usage() {
  echo -e "$__usage"
}

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

check_dependency() {
  if ! [ -x "$(command -v "$1")" ]; then
    echo -e "$(tput setaf 2)Error: $(tput bold)$1$(tput sgr0)$(tput setaf 2) is not installed.$(tput sgr0)" >&2
    exit 1
  fi
}

generate_ansible_ssh_keys() {
  if [ -f "${generated_project_path}/assets/.ssh/id_ed25519.pub" ]; then
    echo "Using existing SSH keys for ansible ✅"
  else
    check_dependency 'ssh-keygen'
    echo "Generating SSH keys for ansible ..."
    mkdir -p "${generated_project_path}/assets/.ssh"
    ssh-keygen -t ed25519 -C "automator@iam-demo.test" -f "${generated_project_path}/assets/.ssh/id_ed25519" -q -N ""
  fi
}

generate_bootstrap_scripts() {
  check_dependency 'jsonnet'
  if [ -f "${project_generator_path}/config.libsonnet" ]; then
    echo "Using existing $(tput bold)config.libsonnet$(tput sgr0) ✅"
  else
    echo "Missing config.libsonnet"
    echo "Copying config.libsonnet.example to config.libsonnet"
    cp "${project_generator_path}/config.libsonnet.${vm_generator_orchestrator}.example" "${project_generator_path}/config.libsonnet"
  fi
  echo "Using orchestrator: $(tput bold)${vm_generator_orchestrator}$(tput sgr0)"
  echo "Using architecture: $(tput bold)${architecture}$(tput sgr0)"
  cd "${project_generator_path}"
  jsonnet --create-output-dirs \
    --multi "${generated_project_path}" \
    --tla-str orchestrator_name="${vm_generator_orchestrator}" \
    --ext-str architecture="${architecture}" \
    --string virtual-machines.jsonnet
  chmod u+x "${generated_project_path}"/*.sh
}

machines_creations() {
  cd "${generated_project_path}"
  ./vms-create.sh
}

machines_setup() {
  cd "${generated_project_path}"
  ./vms-setup.sh
}

machines_provisioning() {
  cd "${generated_project_path}"
  ./vms-provisioning.sh
}

machines_delete() {
  cd "${generated_project_path}"
  ./vms-destroy.sh
}

create=false
generate=false
provision=false
setup=false
delete=false
while [ $# -gt 0 ] && [ "$1" != "" ]; do
  case $1 in
    -a | --all)
      shift
      generate=true
      create=true
      setup=true
      provision=true
      ;;
    -o | --orchestrator)
      vm_generator_orchestrator=( "${2?Missing argument for  -o | --orchestrator}" ) ;
      shift
      shift
      ;;
    -r | --architecture)
      architecture=( "${2?Missing argument for  -r | --architecture}" ) ;
      shift
      shift
      ;;
    -g | --generate)
      shift
      generate=true
      ;;
    -c | --create)
      shift
      create=true
      ;;
    -s | --setup)
      shift
      setup=true
      ;;
    -p | --provision)
      shift
      provision=true
      ;;
    -d | --delete)
      shift
      delete=true
      ;;
    -h | --help)
      shift
      usage
      exit 0
      ;;
    *)
      printf "$(tput setaf 1)Unexpected argument: $(tput bold)%s$(tput sgr0)\n" "$1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ ! " ${valid_architectures[*]} " =~ " ${architecture} " ]]; then
  printf "$(tput setaf 1)Error: 'architecture' must be one of: $(tput bold)${valid_architectures[*]}$(tput sgr0)\n" >&2
  exit 1
fi

if [[ ! " ${valid_orchestrators[*]} " =~ " ${vm_generator_orchestrator} " ]]; then
  printf "$(tput setaf 1)Error: 'orchestrator' must be one of: $(tput bold)${valid_orchestrators[*]}$(tput sgr0)\n" >&2
  exit 1
fi

if $delete; then
  machines_delete
  exit 0
fi

if $generate; then
  echo "$(tput bold)$(tput setaf 2) - Creating virtual machines setup scripts ... - $(tput sgr0)"
  generate_ansible_ssh_keys
  generate_bootstrap_scripts
  echo "$(tput bold)$(tput setaf 2) - VMs setup scripts generated ✅ - $(tput sgr0)"
fi
if $create; then
  echo "$(tput bold)$(tput setaf 2) - Starting virtual machines creation ... - $(tput sgr0)"
  machines_creations
  echo "$(tput bold)$(tput setaf 2) - VMs creation done ✅ - $(tput sgr0)"
fi
if $setup; then
  echo "$(tput bold)$(tput setaf 2) - Running virtual machines setup ... - $(tput sgr0)"
  machines_setup
  echo "$(tput bold)$(tput setaf 2) - VMs setup done ✅ - $(tput sgr0)"
fi
if $provision; then
  echo "$(tput bold)$(tput setaf 2) - Starting virtual machine provisioning ... - $(tput sgr0)"
  machines_provisioning
  echo "$(tput bold)$(tput setaf 2) - VMs provisioning done ✅ - $(tput sgr0)"
fi

echo "$(tput bold)$(tput setaf 2) - All done ✅ - $(tput sgr0)"
echo
echo "$(tput setaf 3)Project path: $(tput bold)${project_path}$(tput sgr0)"

if $create || $setup || $provision; then
  echo
  echo "$(tput setaf 3)To ssh into a virtual machine use $(tput bold)vm-shell.sh <vm-name>$(tput sgr0) from generated the project path."
  echo "  $(tput bold)$(tput setaf 5)Example:$(tput sgr0)"
  echo "  $(tput bold)cd ${generated_project_path}$(tput sgr0)"
  echo "  $(tput bold)./vm-shell.sh ansible-controller$(tput sgr0)"
fi
exit 0
