---
# - name: Generate /etc/systemd/resolved.conf.j2
#   ansible.builtin.template:
#     src: etc/systemd/resolved.conf.j2
#     dest: /etc/systemd/resolved.conf
#     mode: u=rw,g=r,o=r
#   notify:
#     - "reboot machine"
# - name: Generate 50-dhcp-no-dns.network
#   ansible.builtin.copy:
#     dest: /etc/systemd/network/50-dhcp-no-dns.network
#     content: |
#       [Match]
#       Name=en*
#       [Network]
#       DNS={{ bootstrap_network.dns|join(' ') }}
#       Domains={{ bootstrap_network.domains|join(' ') }}
#   notify:
#     - "reboot machine"
- name: Read cloud-init netplan file
  ansible.builtin.slurp:
    path: "{{ cloud_init_netplan_file_path }}"
  register: cloudinit_netplan_file
- name: Extract netplan data as fact
  ansible.builtin.set_fact:
    cloudinit_netplan_data: "{{ cloudinit_netplan_file['content'] | b64decode | from_yaml }}"
- name: Update the netplan fact
  ansible.utils.update_fact:
    updates:
      - path: cloudinit_netplan_data.network.ethernets.{{ network_interface_name }}.dhcp4-overrides
        value:
          use-dns: false
          use-domains: false
      - path: cloudinit_netplan_data.network.ethernets.{{ network_interface_name }}.dhcp6
        value: false
      - path: cloudinit_netplan_data.network.ethernets.{{ network_interface_name }}.set-name
        value: "{{ network_interface_default_name | default(ansible_default_ipv4.interface) }}"
      - path: cloudinit_netplan_data.network.ethernets.{{ network_interface_name }}.nameservers
        value:
          addresses: "{{ bootstrap_network.dns }}"
          search: "{{ bootstrap_network.domains }}"
      - path: cloudinit_netplan_data.network.ethernets.{{ network_interface_name }}.link-local
        value:
          - ipv4
  register: updated
- name: Write back cloud-init netplan file
  ansible.builtin.copy:
    content: "{{ updated.cloudinit_netplan_data | to_nice_yaml }}"
    dest: "{{ cloud_init_netplan_file_path }}"
    mode: u=rw,g=r,o=
  when:
    - updated.changed
  notify:
    - reboot machine
