---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgres
spec:
  replicas: 1
  serviceName: postgres-svc-headless
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: postgres
    spec:
      serviceAccountName: postgres
      containers:
      - name: postgres
        image: postgres:16
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: postgres-env-cm
        - secretRef:
            name: postgres-env-secrets
        ports:
        - name: postgres-port
          containerPort: 5432
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "${POSTGRES_USER}" -d "dbname=${POSTGRES_DB}" -h 127.0.0.1 -p 5432
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "${POSTGRES_USER}" -d "dbname=${POSTGRES_DB}" -h 127.0.0.1 -p 5432
              [ -f "${PGDATA}/tmp/.initialized" ] || [ -f "${PGDATA}/.initialized" ]
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: shared-memory-volume
          mountPath: /dev/shm
        - name: socket-directory
          mountPath: /var/run/postgresql
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: db-init
          mountPath: /docker-entrypoint-initdb.d
      - name: postgres-exporter
        image: "quay.io/prometheuscommunity/postgres-exporter:latest"
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
        envFrom:
        - configMapRef:
            name: postgres-env-cm
        env:
        - name: DATA_SOURCE_NAME
          value: "host=/var/run/postgresql user=${POSTGRES_USER} application_name=postgres_exporter sslmode=${POSTGRES_SSLMODE}"
        ports:
        - containerPort: 9187
          name: pg-exporter
        volumeMounts:
        - name: socket-directory
          mountPath: /var/run/postgresql
          readOnly: true
      volumes:
      - name: socket-directory
        emptyDir: {}
      - name: shared-memory-volume
        emptyDir:
          medium: Memory
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: db-init
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
