---
apiVersion: v1
kind: Secret
metadata:
  name: forgejo-config-scripts
type: Opaque
stringData:
  assertions: ""
  config_environment.sh: |-
    #!/usr/bin/env bash
    set -euo pipefail

    export GITEA_APP_INI="${FORGEJO_APP_INI}"
    if [[ -z "${FORGEJO_APP_INI}" ]]; then
      export GITEA_APP_INI="${FORGEJO_APP_INI}"
    fi
    if [[ -z "${FORGEJO_WORK_DIR}" ]]; then
      export GITEA_WORK_DIR="${FORGEJO_WORK_DIR}"
    fi
    if [[ -z "${FORGEJO_TEMP}" ]]; then
      export GITEA_TEMP="${FORGEJO_TEMP}"
    fi
    if [[ -z "${FORGEJO_CUSTOM}" ]]; then
      export GITEA_CUSTOM="${FORGEJO_CUSTOM}"
    fi

    function env2ini_log() {
      printf "${1}\n"
    }

    function env2ini_read_config_to_env() {
      local section="${1}"
      local line="${2}"

      if [[ -z "${line}" ]]; then
        # skip empty line
        return
      fi

      # 'xargs echo -n' trims all leading/trailing whitespaces and a trailing new line
      local setting="$(echo "${line}" | awk -F '=' '{print $1}' | xargs echo -n)"

      if [[ -z "${setting}" ]]; then
        env2ini_log '  ! invalid setting'
        exit 1
      fi

      env2ini_log "  + '${setting}'"

      local value=''
      local regex="^${setting}(\s*)=(\s*)(.*)"
      if [[ $line =~ $regex ]]; then
        value="${BASH_REMATCH[3]}"
      else
        env2ini::log '  ! invalid setting'
        exit 1
      fi

      if [[ -z "${section}" ]]; then
        export "FORGEJO_____${setting^^}"="${value}"                           # '^^' makes the variable content uppercase
        return
      fi

      local masked_section="${section//./_0X2E_}"                            # '//' instructs to replace all matches
      masked_section="${masked_section//-/_0X2D_}"

      export "FORGEJO___${masked_section^^}__${setting^^}"="${value}"        # '^^' makes the variable content uppercase
    }

    function env2ini_reload_preset_envs() {
      env2ini_log "Reloading preset envs..."

      while read -r line; do
        if [[ -z "${line}" ]]; then
          env2ini_log "skip empty line"
          return
        fi

        env2ini_log "Working on line: '${line}'"

        # 'xargs echo -n' trims all leading/trailing whitespaces and a trailing new line
        local setting="$(echo "${line}" | awk -F '=' '{print $1}' | xargs echo -n)"

        if [[ -z "${setting}" ]]; then
          env2ini_log '  ! invalid setting'
          exit 1
        fi

        env2ini_log "  + '${setting}'"

        local value=''
        local regex="^${setting}(\s*)=(\s*)(.*)"
        if [[ $line =~ $regex ]]; then
          value="${BASH_REMATCH[3]}"
        else
          env2ini::log '  ! invalid setting'
          exit 1
        fi

        export "${setting^^}"="${value}"                           # '^^' makes the variable content uppercase
      done < "/tmp/existing-envs"

      rm /tmp/existing-envs
    }

    function env2ini_process_config_file() {
      local config_file="${1}"
      local section="$(basename "${config_file}")"

      if [[ $section == '_generals_' ]]; then
        env2ini_log "  [ini root]"
        section=''
      else
        env2ini_log "  ${section}"
      fi

      while read -r line; do
        env2ini_read_config_to_env "${section}" "${line}"
      done < <(awk 1 "${config_file}")                             # Helm .toYaml trims the trailing new line which breaks line processing; awk 1 ... adds it back while reading
    }

    function env2ini_load_config_sources() {
      local path="${1}"

      if [[ -d "${path}" ]]; then
        env2ini_log "Processing $(basename "${path}")..."

        while read -d '' configFile; do
          env2ini_process_config_file "${configFile}"
        done < <(find "${path}" -type l -not -name '..data' -print0)

        env2ini_log "\n"
      fi
    }

    function env2ini_generate_initial_secrets() {
      # These environment variables will either be
      #   - overwritten with user defined values,
      #   - initially used to set up Forgejo
      # Anyway, they won't harm existing app.ini files

      export FORGEJO___SECURITY__INTERNAL_TOKEN=$(forgejo generate secret INTERNAL_TOKEN)
      export FORGEJO___SECURITY__SECRET_KEY=$(forgejo generate secret SECRET_KEY)
      export FORGEJO___OAUTH2__JWT_SECRET=$(forgejo generate secret JWT_SECRET)
      export FORGEJO___SERVER__LFS_JWT_SECRET=$(forgejo generate secret LFS_JWT_SECRET)

      env2ini_log "...Initial secrets generated\n"
    }

    # save existing envs prior to script execution. Necessary to keep order of preexisting and custom envs
    env | (grep -e "^FORGEJO__" || [[ $? == 1 ]]) > /tmp/existing-envs

    # MUST BE CALLED BEFORE OTHER CONFIGURATION
    env2ini_generate_initial_secrets

    env2ini_load_config_sources '/env-to-ini-mounts/inlines/'
    env2ini_load_config_sources '/env-to-ini-mounts/additionals/'

    # load existing envs to override auto generated envs
    env2ini_reload_preset_envs

    env2ini_log "=== All configuration sources loaded ===\n"

    # safety to prevent rewrite of secret keys if an app.ini already exists
    if [ -f "${FORGEJO_APP_INI}" ]; then
      env2ini_log 'An app.ini file already exists.'
    fi

    environment-to-ini -o "${FORGEJO_APP_INI}"
