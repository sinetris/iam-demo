---
apiVersion: v1
kind: Secret
metadata:
  name: forgejo-init
  labels:
    app.kubernetes.io/name: forgejo-init
type: Opaque
stringData:
  configure_gpg_environment.sh: |-
    #!/usr/bin/env bash
    set -eu

    gpg --batch --import /raw/private.asc
  init_directory_structure.sh: |-
    #!/usr/bin/env bash
    set -euo pipefail

    FORGEJO_CHMOD_TEMP=${FORGEJO_CHMOD_TEMP:-false}

    set -x
    mkdir -p "${HOME}/.ssh"
    chmod -R 700 "${HOME}/.ssh"
    [ ! -d "${FORGEJO_WORK_DIR}/conf" ] && mkdir -p "${FORGEJO_WORK_DIR}/conf"

    config_dir=$(dirname "${FORGEJO_APP_INI}")
    [ ! -d "${config_dir}" ] && mkdir -p "${config_dir}"

    # prepare temp directory structure
    mkdir -p "${FORGEJO_TEMP}"
    if [ "${FORGEJO_CHMOD_TEMP}" = true ]; then
      chmod ug+rwx "${FORGEJO_TEMP}"
    fi
  configure_forgejo.sh: |-
    #!/usr/bin/env bash

    set -euo pipefail

    echo '==== BEGIN FORGEJO CONFIGURATION ===='

    { # try
      forgejo migrate
    } || { # catch
      echo "Gitea migrate might fail due to database connection...This init-container will try again in a few seconds"
      exit 1
    }
    function test_redis_connection() {
      local RETRY=0
      local MAX=30

      echo 'Wait for redis to become avialable...'
      until [ "${RETRY}" -ge "${MAX}" ]; do
        nc -vz -w2 "${FORGEJO_REDIS_HOSTNAME}" ${FORGEJO_REDIS_PORT} && break
        RETRY=$[${RETRY}+1]
        echo "...not ready yet (${RETRY}/${MAX})"
      done

      if [ "${RETRY}" -ge "${MAX}" ]; then
        echo "Redis not reachable after '${MAX}' attempts!"
        exit 1
      fi
    }

    test_redis_connection
    function configure_admin_user() {
      local full_admin_list=$(forgejo admin user list --admin)
      local actual_user_table=''

      # We might have distorted output due to warning logs, so we have to detect the actual user table by its headline and trim output above that line
      local regex="(.*)(ID\s+Username\s+Email\s+IsActive.*)"
      if [[ "${full_admin_list}" =~ $regex ]]; then
        actual_user_table=$(echo "${BASH_REMATCH[2]}" | tail -n+2) # tail'ing to drop the table headline
      else
        # This code block should never be reached, as long as the output table header remains the same.
        # If this code block is reached, the regex doesn't match anymore and we probably have to adjust this script.

        echo "ERROR: 'configure_admin_user' was not able to determine the current list of admin users."
        echo "DEBUG: Output of 'forgejo admin user list --admin'"
        echo "--"
        echo "${full_admin_list}"
        echo "--"
        exit 1
      fi

      local ACCOUNT_ID=$(echo "${actual_user_table}" | grep -E "\s+${FORGEJO_ADMIN_USERNAME}\s+" | awk -F " " "{printf \$1}")
      if [[ -z "${ACCOUNT_ID}" ]]; then
        echo "No admin user '${FORGEJO_ADMIN_USERNAME}' found. Creating now..."
        forgejo admin user create --admin --username "${FORGEJO_ADMIN_USERNAME}" --password "${FORGEJO_ADMIN_PASSWORD}" --email "${FORGEJO_ADMIN_EMAIL}" --must-change-password=false
        echo '...created.'
      else
        echo "Admin account '${FORGEJO_ADMIN_USERNAME}' already exist. Running update to sync password..."
        forgejo admin user change-password --username "${FORGEJO_ADMIN_USERNAME}" --password "${FORGEJO_ADMIN_PASSWORD}"
        echo '...password sync done.'
      fi
    }

    configure_admin_user

    function configure_ldap() {
        echo 'no ldap configuration... skipping.'
    }

    configure_ldap

    function configure_oauth() {
        echo 'no oauth configuration... skipping.'
    }

    configure_oauth

    echo '==== END FORGEJO CONFIGURATION ===='
