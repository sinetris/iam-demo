#!/usr/bin/env bash
set -Eeuo pipefail

generator_orchestrator=multipass
host_architecture=$(uname -m)
# Paths relative to project root
generated_project_relative_path=generated
project_generator_relative_path="platform/project-script-generator"

project_root_path=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
project_generator_path="${project_root_path:?}/${project_generator_relative_path:?}"
generated_project_path="${project_root_path:?}/${generated_project_relative_path:?}"
valid_architectures=( amd64 x86_64 arm64 aarch64 )
valid_orchestrators=( fake multipass vbox )

__usage=$(
	cat <<-HELPMSG
		$(tput setaf 2)Usage:$(tput sgr0) $(tput bold)$0 [OPTIONS]$(tput sgr0)

		$(tput setaf 3)$(tput bold)Manage instances provisioning.$(tput sgr0)

		Options:
		  -a, --all                   $(tput setaf 8)Run all tasks to setup instances (in order: generate bootstrap wrap-up provision)$(tput sgr0)
		  -o, --orchestrator          $(tput setaf 8)Select orchestrator for instances management scripts generator (default: '${generator_orchestrator}')$(tput sgr0)
		  -m, --machine-architecture  $(tput setaf 8)Host architecture (default: '${host_architecture}' using 'uname -m')$(tput sgr0)
		  -g, --generate              $(tput setaf 8)Generate instances management scripts$(tput sgr0)
		  -b, --bootstrap             $(tput setaf 8)Bootstrap project network and instances using generated scripts$(tput sgr0)
		  -w, --wrap-up               $(tput setaf 8)Wrap-up project basic setup using generated scripts$(tput sgr0)
		  -p, --provision             $(tput setaf 8)Provision instances using generated scripts$(tput sgr0)
		  -d, --delete                $(tput setaf 8)Delete instances and local project data using generated scripts$(tput sgr0)
		  -h, --help                  $(tput setaf 8)This help$(tput sgr0)
	HELPMSG
)

usage() {
  echo -e "$__usage"
}

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

check_dependency() {
  if ! [ -x "$(command -v "$1")" ]; then
    echo -e "$(tput setaf 2)Error: $(tput bold)$1$(tput sgr0)$(tput setaf 2) is not installed.$(tput sgr0)" >&2
    exit 1
  fi
}

generate_ansible_ssh_keys() {
  ansible_ssh_key_file="${generated_project_relative_path:?}/assets/.ssh/id_ed25519"
  if [ -f "${project_root_path:?}/${ansible_ssh_key_file:?}" ]; then
    echo "Using existing SSH keys for ansible ✅"
  else
    check_dependency 'ssh-keygen'
    echo "Generating SSH keys for ansible ..."
    mkdir -p "$(dirname "${project_root_path:?}/${ansible_ssh_key_file:?}")"
    ssh-keygen -t ed25519 -C "automator@iam-demo.test" -f "${project_root_path:?}/${ansible_ssh_key_file:?}" -q -N ""
  fi
}

generate_bootstrap_scripts() {
  check_dependency 'jsonnet'
  project_config_file="${project_generator_relative_path:?}/config/config.libsonnet"
  if [ -f "${project_root_path:?}/${project_config_file:?}" ]; then
    echo "Using existing project config '$(tput bold)${project_config_file:?}$(tput sgr0)' ✅"
  else
    echo "Missing config.libsonnet"
    echo "Copying config.libsonnet.${generator_orchestrator:?}.example to '${project_config_file:?}'"
    cp "${project_generator_path:?}/config/config.libsonnet.${generator_orchestrator:?}.example" \
      "${project_root_path:?}/${project_config_file:?}"
  fi
  echo "Using orchestrator: $(tput bold)${generator_orchestrator}$(tput sgr0)"
  echo "Using host_architecture: $(tput bold)${host_architecture}$(tput sgr0)"
  jsonnet --create-output-dirs \
    --multi "${generated_project_path}" \
    --ext-str project_root_path="${project_root_path}" \
    --ext-str orchestrator_name="${generator_orchestrator}" \
    --ext-str host_architecture="${host_architecture}" \
    --jpath "${project_root_path}" \
    --jpath "${project_generator_path}" \
    --jpath "${project_generator_path}/config" \
    --string "${project_generator_path}/project-files-generator.jsonnet"
  chmod u+x "${generated_project_path}"/*.sh
}

project_bootstrap() {
  cd "${generated_project_path}"
  ./project-bootstrap.sh
}

instances_wrap_up() {
  cd "${generated_project_path}"
  ./project-wrap-up.sh
}

instances_provisioning() {
  cd "${generated_project_path}"
  ./instances-provisioning.sh
}

instances_delete() {
  cd "${generated_project_path}"
  ./instances-destroy.sh
}

bootstrap=false
generate=false
provision=false
wrap_up=false
delete=false
while [ $# -gt 0 ] && [ "$1" != "" ]; do
  case $1 in
    -a | --all)
      shift
      generate=true
      bootstrap=true
      setup=true
      provision=true
      ;;
    -o | --orchestrator)
      generator_orchestrator=( "${2?Missing argument for  -o | --orchestrator}" ) ;
      shift
      shift
      ;;
    -m | --machine-architecture)
      host_architecture=( "${2?Missing argument for  -m | --machine-architecture}" ) ;
      shift
      shift
      ;;
    -g | --generate)
      shift
      generate=true
      ;;
    -b | --bootstrap)
      shift
      bootstrap=true
      ;;
    -w | --wrap-up)
      shift
      wrap_up=true
      ;;
    -p | --provision)
      shift
      provision=true
      ;;
    -d | --delete)
      shift
      delete=true
      ;;
    -h | --help)
      shift
      usage
      exit 0
      ;;
    *)
      printf "$(tput setaf 1)Unexpected argument: $(tput bold)%s$(tput sgr0)\n" "$1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ ! " ${valid_architectures[*]} " =~ " ${host_architecture} " ]]; then
  printf "$(tput setaf 1)Error: 'host_architecture' must be one of: $(tput bold)${valid_architectures[*]}$(tput sgr0)\n" >&2
  exit 1
fi

if [[ ! " ${valid_orchestrators[*]} " =~ " ${generator_orchestrator} " ]]; then
  printf "$(tput setaf 1)Error: 'orchestrator' must be one of: $(tput bold)${valid_orchestrators[*]}$(tput sgr0)\n" >&2
  exit 1
fi

if $delete; then
  instances_delete
  exit 0
fi

if $generate; then
  echo "$(tput bold)$(tput setaf 2) - Creating instances setup scripts ... - $(tput sgr0)"
  generate_ansible_ssh_keys
  generate_bootstrap_scripts
  echo "$(tput bold)$(tput setaf 2) - Instances setup scripts generated ✅ - $(tput sgr0)"
fi
if $bootstrap; then
  echo "$(tput bold)$(tput setaf 2) - Starting project network and instances creation ... - $(tput sgr0)"
  project_bootstrap
  echo "$(tput bold)$(tput setaf 2) - Project network and instances creation done ✅ - $(tput sgr0)"
fi
if $wrap_up; then
  echo "$(tput bold)$(tput setaf 2) - Running project wrap-up ... - $(tput sgr0)"
  instances_wrap_up
  echo "$(tput bold)$(tput setaf 2) - Project wrap-up done ✅ - $(tput sgr0)"
fi
if $provision; then
  echo "$(tput bold)$(tput setaf 2) - Starting instances provisioning ... - $(tput sgr0)"
  instances_provisioning
  echo "$(tput bold)$(tput setaf 2) - Instances provisioning done ✅ - $(tput sgr0)"
fi

echo "$(tput bold)$(tput setaf 2) - All done ✅ - $(tput sgr0)"
echo
echo "$(tput setaf 3)Project root path: $(tput bold)${project_root_path}$(tput sgr0)"

if $bootstrap || $setup || $provision; then
  echo
  echo "$(tput setaf 3)To ssh into an instance use $(tput bold)./instance-shell.sh <instance-name>$(tput sgr0) from the generated folder."
  echo "  $(tput bold)$(tput setaf 5)Example:$(tput sgr0)"
  echo "  $(tput bold)cd ${generated_project_path}$(tput sgr0)"
  echo "  $(tput bold)./instance-shell.sh ansible-controller$(tput sgr0)"
fi
