#!/usr/bin/env bash
set -Eeuo pipefail

generator_orchestrator=multipass
host_architecture=$(uname -m)
# Paths relative to project root
generated_project_relative_path=generated
project_generator_relative_path="platform/project-script-generator"

project_root_path=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
project_generator_path="${project_root_path:?}/${project_generator_relative_path:?}"
generated_project_path="${project_root_path:?}/${generated_project_relative_path:?}"
valid_architectures=( amd64 x86_64 arm64 aarch64 )
valid_orchestrators=( fake multipass vbox )

: "${NO_COLOR:=0}"
if [[ -z ${NO_COLOR+notset} ]] || [ "${NO_COLOR}" == "0" ]; then
  bold_text=$(tput bold)
  bad_result_text=$(tput setaf 1)
  good_result_text=$(tput setaf 2)
  highlight_text=$(tput setaf 3)
  info_text=$(tput setaf 4)
  gray_text=$(tput setaf 8)
  reset_text=$(tput sgr 0)
  status_success=‚úÖ
  status_error=‚ùå
  status_warning=‚ö†Ô∏è
  status_info=‚ÑπÔ∏è
  status_waiting=üí§
  status_action=‚öôÔ∏è
else
  bold_text=''
  bad_result_text=''
  good_result_text=''
  highlight_text=''
  info_text=''
  gray_text=''
  reset_text=''
  status_success='[SUCCESS]'
  status_error='[ERROR]'
  status_warning='[WARNING]'
  status_info='[INFO]'
  status_waiting='[WAITING]'
  status_action='[ACTION]'
fi


join_array() {
  if [ $# -lt 3 ]; then
    echo "Usage: ${bold_text}$0 <separator> <array>${reset_text}" >&2
    exit 1
  fi
  local separator="$1"
  local first_item="$2"
  shift 2
  local other_items=("$@")
  printf "'%s'" "$first_item"
  for item in "${other_items[@]}"; do
    printf "%s'%s'" "$separator" "$item"
  done
}

__usage=$(
	cat <<-HELPMSG
		${highlight_text}Usage:${reset_text} ${bold_text}$0 [OPTIONS]${reset_text}

		${highlight_text}${bold_text}Manage instances provisioning.${reset_text}

		${highlight_text}Options:${reset_text}
		  -a, --all                   ${gray_text}Run all tasks to setup the project (in order: generate configure bootstrap wrap-up provision)${reset_text}
		  -o, --orchestrator          ${gray_text}Select orchestrator for project scripts generator (default: '${generator_orchestrator}')${reset_text}
		                                  ${gray_text}Valid orchestrators: ${bold_text}$(join_array ', ' "${valid_orchestrators[@]}")${reset_text}
		  -m, --machine-architecture  ${gray_text}Host architecture (default: '${host_architecture}' using 'uname -m')${reset_text}
		                                  ${gray_text}Valid architectures: ${bold_text}$(join_array ', ' "${valid_architectures[@]}")${reset_text}
		  -g, --generate              ${gray_text}Generate project management scripts${reset_text}
		  -c, --configure             ${gray_text}Generate project configuration${reset_text}
		  -b, --bootstrap             ${gray_text}Bootstrap project network and instances${reset_text}
		  -w, --wrap-up               ${gray_text}Wrap-up project basic setup and create instances base snapshot${reset_text}
		  -p, --provision             ${gray_text}Provision instances${reset_text}
		  -r, --restore-snapshots     ${gray_text}Restore instances base snapshot${reset_text}
		  -d, --delete                ${gray_text}Delete instances and local project data${reset_text}
		  -h, --help                  ${gray_text}This help${reset_text}
		${highlight_text}Environment variables:${reset_text}
		  NO_COLOR                    ${gray_text}Suppress colorized output${reset_text}
	HELPMSG
)

element_is_in_array() {
  if [ $# -lt 2 ]; then
    echo "Usage: ${bold_text}$0 <element> <array>${reset_text}" >&2
    exit 1
  fi
  local seeking="$1"
  shift
  local elements=("$@")
  local found_code=0
  local not_found_code=1
  for element in "${elements[@]}"; do
    if [[ "$element" == "$seeking" ]]; then
      return ${found_code}
    fi
  done
  return ${not_found_code}
}

usage() {
  echo -e "$__usage"
}

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

check_dependency() {
  if ! [ -x "$(command -v "$1")" ]; then
    echo -e "${bad_result_text}Error: ${bold_text}$1${reset_text}${bad_result_text} is not installed.${reset_text}" >&2
    exit 1
  fi
}

generate_ansible_ssh_keys() {
  ansible_ssh_key_file="${generated_project_relative_path:?}/assets/.ssh/id_ed25519"
  if [ -f "${project_root_path:?}/${ansible_ssh_key_file:?}" ]; then
    echo " ${status_info} Using existing SSH keys for ansible."
  else
    check_dependency 'ssh-keygen'
    echo " ${status_action} Generating SSH keys for ansible ..."
    mkdir -p "$(dirname "${project_root_path:?}/${ansible_ssh_key_file:?}")"
    ssh-keygen -t ed25519 -C "automator@iam-demo.test" -f "${project_root_path:?}/${ansible_ssh_key_file:?}" -q -N ""
    echo " ${status_success} SSH keys for ansible generated."
  fi
}

generate_bootstrap_scripts() {
  check_dependency 'jsonnet'
  project_config_file="${project_generator_relative_path:?}/config/config.libsonnet"
  if [ -f "${project_root_path:?}/${project_config_file:?}" ]; then
    echo " ${status_info} Using existing project config '${bold_text}${project_config_file:?}${reset_text}'"
  else
    echo " ${status_info} Missing config.libsonnet"
    echo " ${status_action} Copying config.libsonnet.${generator_orchestrator:?}.example to '${project_config_file:?}'"
    cp "${project_generator_path:?}/config/config.libsonnet.${generator_orchestrator:?}.example" \
      "${project_root_path:?}/${project_config_file:?}"
  fi
  echo " ${status_info} Using orchestrator: ${bold_text}${generator_orchestrator}${reset_text}"
  echo " ${status_info} Using host_architecture: ${bold_text}${host_architecture}${reset_text}"
  jsonnet --create-output-dirs \
    --multi "${generated_project_path}" \
    --ext-str project_root_path="${project_root_path}" \
    --ext-str orchestrator_name="${generator_orchestrator}" \
    --ext-str host_architecture="${host_architecture}" \
    --jpath "${project_root_path}" \
    --jpath "${project_generator_path}" \
    --jpath "${project_generator_path}/config" \
    --string "${project_generator_path}/project-files-generator.jsonnet"
  chmod u+x "${generated_project_path}"/*.sh
}

project_configure() {
  cd "${generated_project_path}"
  ./project-prepare-config.sh
}

project_bootstrap() {
  cd "${generated_project_path}"
  ./project-bootstrap.sh
}

instances_wrap_up() {
  cd "${generated_project_path}"
  ./project-wrap-up.sh
}

project_provisioning() {
  cd "${generated_project_path}"
  ./project-provisioning.sh
}

project_restore_snapshots() {
  cd "${generated_project_path}"
  ./project-restore-snapshots.sh
}

instances_delete() {
  cd "${generated_project_path}"
  ./project-delete.sh
}

configure=false
bootstrap=false
generate=false
provision=false
wrap_up=false
delete=false
restore_snapshots=false
while [ $# -gt 0 ] && [ "$1" != "" ]; do
  case $1 in
    -a | --all)
      shift
      generate=true
      configure=true
      bootstrap=true
      wrap_up=true
      provision=true
      ;;
    -o | --orchestrator)
      generator_orchestrator="${2?Missing argument for  -o | --orchestrator}"
      shift
      shift
      ;;
    -m | --machine-architecture)
      host_architecture="${2?Missing argument for  -m | --machine-architecture}"
      shift
      shift
      ;;
    -g | --generate)
      shift
      generate=true
      ;;
    -c | --configure)
      shift
      configure=true
      ;;
    -b | --bootstrap)
      shift
      bootstrap=true
      ;;
    -w | --wrap-up)
      shift
      wrap_up=true
      ;;
    -p | --provision)
      shift
      provision=true
      ;;
    -r | --restore-snapshots)
      shift
      restore_snapshots=true
      ;;
    -d | --delete)
      shift
      delete=true
      ;;
    -h | --help)
      shift
      usage
      exit 0
      ;;
    *)
      printf "${bad_result_text}Unexpected argument: ${bold_text}%s${reset_text}\n" "$1" >&2
      usage
      exit 1
      ;;
  esac
done

if ! element_is_in_array "${host_architecture}" "${valid_architectures[@]}"; then
  echo "${status_error} ${bad_result_text}Error: 'host_architecture' must be one of: ${bold_text}${valid_architectures[*]}${reset_text}" >&2
  exit 1
fi

if ! element_is_in_array "${generator_orchestrator}" "${valid_orchestrators[@]}"; then
  echo "${status_error} ${bad_result_text}Error: 'orchestrator' must be one of: ${bold_text}${valid_orchestrators[*]}${reset_text}" >&2
  exit 1
fi

if $delete && $bootstrap && ! ($generate && $configure); then
  echo "${status_error}${bad_result_text} Calling 'bootstrap' after 'delete' without calling first 'generate' and 'configure'.${reset_text}" >&2
  exit 1
fi

if $delete; then
  instances_delete
fi

if $generate; then
  echo "${status_info}${bold_text}${highlight_text} - Generating project management scripts ... - ${reset_text}"
  generate_ansible_ssh_keys
  generate_bootstrap_scripts
  echo "${status_success}${bold_text}${good_result_text} - Project management scripts generated - ${reset_text}"
fi
if $configure; then
  echo "${status_info}${bold_text}${highlight_text} - Preparing project configuration ... - ${reset_text}"
  project_configure
  echo "${status_success}${bold_text}${good_result_text} - Project configuration done - ${reset_text}"
fi
if $bootstrap; then
  echo "${status_info}${bold_text}${highlight_text} - Starting project network and instances creation ... (might take some time ${status_waiting}) - ${reset_text}"
  project_bootstrap
  echo "${status_success}${bold_text}${good_result_text} - Project network and instances creation done - ${reset_text}"
fi
if $wrap_up; then
  echo "${status_info}${bold_text}${highlight_text} - Running project wrap-up ... - ${reset_text}"
  instances_wrap_up
  echo "${status_success}${bold_text}${good_result_text} - Project wrap-up done - ${reset_text}"
fi
if $provision; then
  echo "${status_info}${bold_text}${highlight_text} - Starting project instances provisioning ... - ${reset_text}"
  project_provisioning
  echo "${status_success}${bold_text}${good_result_text} - Project instances provisioning done - ${reset_text}"
fi
if $restore_snapshots; then
  echo "${status_info}${bold_text}${highlight_text} - Starting project instances snapshot restore ... - ${reset_text}"
  echo " ${status_warning}${highlight_text} The current instance state will be discarded. ${reset_text}"
  project_restore_snapshots
  echo "${status_success}${bold_text}${good_result_text} - Project instances snapshot restore done - ${reset_text}"
fi

echo "${status_success}${bold_text}${highlight_text} - All done - ${reset_text}"
echo
echo " ${highlight_text}Project root path: ${bold_text}${project_root_path}${reset_text}"

if $bootstrap || $wrap_up || $provision; then
  echo
  echo "${info_text}To ssh into an instance use ${bold_text}./instance-shell.sh <instance-name>${reset_text}${info_text} from the generated folder.${reset_text}"
  echo "  ${highlight_text}Example:${reset_text}"
  echo "  ${bold_text}cd ${generated_project_path}${reset_text}"
  echo "  ${bold_text}./instance-shell.sh ansible-controller${reset_text}"
fi
